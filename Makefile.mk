# AnalyLit V4.0 - Makefile pour la gestion du projet
# Utilisation: make [target]

.PHONY: help install start stop restart status logs backup clean update models shell

# --- Configuration & D√©tection automatique de Docker Compose ---
COMPOSE_FILE ?= docker-compose.yml

# D√©tecte si 'docker compose' (v2) ou 'docker-compose' (v1) doit √™tre utilis√©.
COMPOSE := docker-compose
ifneq (, $(shell docker compose version 2>/dev/null))
	COMPOSE := docker compose
endif
PROJECT_NAME=analylit-v4

# Couleurs pour l'affichage
BLUE=\033[34m
GREEN=\033[32m
YELLOW=\033[33m
RED=\033[31m
NC=\033[0m # No Color

help: ## Afficher l'aide
	@echo ""
	@echo "$(BLUE)AnalyLit V4.0 - Commandes disponibles:$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-15s$(NC) %s\n", $$1, $$2}'
	@echo ""

build-base: ## Construit les images de base (cpu puis gpu) dans le bon ordre
	@echo "$(BLUE)üõ†Ô∏è  Construction de l'image de base CPU...$(NC)"
	@$(COMPOSE) -f $(COMPOSE_FILE) build base-cpu
	@echo "$(BLUE)üõ†Ô∏è  Construction de l'image de base GPU...$(NC)"
	@$(COMPOSE) -f $(COMPOSE_FILE) build base-gpu
	@echo "$(GREEN)‚úÖ Images de base construites avec succ√®s.$(NC)"

install: ## Installation compl√®te d'AnalyLit
	@echo "$(BLUE)üöÄ Installation d'AnalyLit V4.0...$(NC)"
	@mkdir -p projects web
	@if [ ! -f .env ]; then cp env.example .env; echo "$(YELLOW)‚ö†Ô∏è  Fichier .env cr√©√© √† partir d'env.example$(NC)"; fi
	@$(MAKE) build-base
	@echo "$(BLUE)üöÄ D√©marrage des services en mode production...$(NC)"
	@$(COMPOSE) -f $(COMPOSE_FILE) up -d --build
	@echo "$(GREEN)‚úÖ Installation termin√©e!$(NC)"
	@echo "$(BLUE)üåê Interface web: http://localhost:5000$(NC)"

start: ## D√©marrer les services
	@echo "$(BLUE)üöÄ D√©marrage des services...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Services d√©marr√©s$(NC)"

stop: ## Arr√™ter les services
	@echo "$(BLUE)üõë Arr√™t des services...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down
	@echo "$(GREEN)‚úÖ Services arr√™t√©s$(NC)"

restart: stop start ## Red√©marrer les services

status: ## Afficher l'√©tat des services
	@echo "$(BLUE)üìä √âtat des services:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps
	@echo ""
	@echo "$(BLUE)üîß Utilisation des ressources:$(NC)"
	@docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" | head -6

logs: ## Afficher les logs des services
	@echo "$(BLUE)üìã Logs des services:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) logs --tail=50

logs-follow: ## Suivre les logs en temps r√©el
	@echo "$(BLUE)üìã Suivi des logs en temps r√©el (Ctrl+C pour arr√™ter):$(NC)"
	@docker-compose -f $(COMPOSE_FILE) logs -f

logs-web: ## Logs du serveur web uniquement
	@docker-compose -f $(COMPOSE_FILE) logs -f web

logs-worker: ## Logs des workers uniquement
	@docker-compose -f $(COMPOSE_FILE) logs -f worker

logs-ollama: ## Logs d'Ollama uniquement
	@docker-compose -f $(COMPOSE_FILE) logs -f ollama

backup: ## Cr√©er une sauvegarde des donn√©es
	@echo "$(BLUE)üíæ Cr√©ation de la sauvegarde...$(NC)"
	@mkdir -p backups
	@tar -czf backups/analylit-backup-$$(date +%Y%m%d-%H%M%S).tar.gz projects/
	@echo "$(GREEN)‚úÖ Sauvegarde cr√©√©e dans le dossier backups/$(NC)"

models: ## T√©l√©charger les mod√®les IA essentiels
	@echo "$(BLUE)ü§ñ T√©l√©chargement des mod√®les essentiels...$(NC)"
	@echo "$(YELLOW)‚è≥ Attente du d√©marrage d'Ollama...$(NC)"
	@until curl -f http://localhost:11434/api/version >/dev/null 2>&1; do sleep 2; done
	@echo "$(BLUE)üì• T√©l√©chargement de llama3.1:8b...$(NC)"
	@docker exec $$(docker-compose -f $(COMPOSE_FILE) ps -q ollama) ollama pull llama3.1:8b
	@echo "$(BLUE)üì• T√©l√©chargement de phi3:mini...$(NC)"
	@docker exec $$(docker-compose -f $(COMPOSE_FILE) ps -q ollama) ollama pull phi3:mini
	@echo "$(BLUE)üì• T√©l√©chargement de gemma:2b...$(NC)"
	@docker exec $$(docker-compose -f $(COMPOSE_FILE) ps -q ollama) ollama pull gemma:2b
	@echo "$(GREEN)‚úÖ Mod√®les essentiels t√©l√©charg√©s$(NC)"

shell-web: ## Acc√©der au shell du conteneur web
	@docker-compose -f $(COMPOSE_FILE) exec web /bin/bash

shell-worker: ## Acc√©der au shell du conteneur worker
	@docker-compose -f $(COMPOSE_FILE) exec worker /bin/bash

shell-redis: ## Acc√©der au shell Redis
	@docker-compose -f $(COMPOSE_FILE) exec redis redis-cli

update: ## Mettre √† jour AnalyLit
	@echo "$(BLUE)üîÑ Mise √† jour d'AnalyLit...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down
	@docker-compose -f $(COMPOSE_FILE) build --no-cache
	@docker-compose -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)‚úÖ Mise √† jour termin√©e$(NC)"

clean: ## Nettoyer le syst√®me (‚ö†Ô∏è supprime les donn√©es)
	@echo "$(RED)‚ö†Ô∏è  Cette action va supprimer tous les conteneurs et volumes$(NC)"
	@read -p "√ätes-vous s√ªr? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	@echo "$(BLUE)üßπ Nettoyage en cours...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) down -v
	@docker image prune -f
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

dev: ## Mode d√©veloppement (sans rebuild). Utiliser 'make build' avant si n√©cessaire.
	@echo "$(BLUE)üîß D√©marrage en mode d√©veloppement...$(NC)"
	@echo "$(YELLOW)Les fichiers locaux seront synchronis√©s avec les conteneurs.$(NC)"
	@$(COMPOSE) -f $(COMPOSE_FILE) -f docker-compose.dev.yml --profile default --profile gpu up -d
	@echo "$(GREEN)‚úÖ Mode d√©veloppement d√©marr√©. Interface web: http://localhost:5000$(NC)"

build: build-base build-app ## Construit toutes les images n√©cessaires

build-app: ## Construit les images applicatives (web, workers)
	@echo "$(BLUE)üõ†Ô∏è  Construction des images applicatives (web, workers)...$(NC)"
	@$(COMPOSE) -f $(COMPOSE_FILE) build web worker-fast worker-default worker-ai
	@echo "$(GREEN)‚úÖ Images applicatives construites.$(NC)"

rebuild: ## Force la reconstruction de toutes les images (sans cache)
	@echo "$(YELLOW)‚ö†Ô∏è  For√ßage de la reconstruction de toutes les images sans cache...$(NC)"
	@$(COMPOSE) -f $(COMPOSE_FILE) build --no-cache

test: ## Ex√©cuter les tests
	@echo "$(BLUE)üß™ Ex√©cution des tests...$(NC)"
	@docker-compose -f $(COMPOSE_FILE) run --rm web pytest -v tests/ > logs/pytest_results.log 2>&1
	@mkdir -p logs

test-workflow: ## Ex√©cuter le test de workflow ATN de bout en bout
	@echo "$(BLUE)üß™ Ex√©cution du test de workflow ATN...$(NC)"
	@echo "$(YELLOW)Assurez-vous que les services sont d√©marr√©s avec 'make start'$(NC)"
	@python scripts/test_atn_workflow.py
	@echo "$(GREEN)‚úÖ Test de workflow termin√©.$(NC)"

seed-project: ## Cr√©e un projet de test dans l'environnement de production
	@echo "$(BLUE)üå± Cr√©ation d'un projet de d√©monstration dans la base de donn√©es de production...$(NC)"
	@echo "$(YELLOW)Assurez-vous que les services sont d√©marr√©s avec 'make start' ou 'make install'$(NC)"
	@echo "$(YELLOW)Cette op√©ration peut prendre plusieurs minutes...$(NC)"
	# ‚úÖ CORRECTION: On passe les variables d'environnement pour que le script
	# sache qu'il doit communiquer avec le service 'web' sur son port interne.
	@docker-compose exec -e API_HOST=web -e API_PORT=5000 web python scripts/test_atn_workflow.py
	@echo "$(GREEN)‚úÖ Projet de d√©monstration cr√©√© avec succ√®s !$(NC)"
	@echo "$(BLUE)‚û°Ô∏è  Rafra√Æchissez votre navigateur pour voir le projet 'Test ATN'.$(NC)"

health: ## V√©rifier la sant√© des services
	@echo "$(BLUE)üè• V√©rification de la sant√© des services:$(NC)"
	@curl -f http://localhost:8080/api/health && echo "$(GREEN)‚úÖ API Web: OK$(NC)" || echo "$(RED)‚ùå API Web: Erreur$(NC)"
	@curl -f http://localhost:11434/api/version && echo "$(GREEN)‚úÖ Ollama: OK$(NC)" || echo "$(RED)‚ùå Ollama: Erreur$(NC)"

monitor: ## Surveiller les ressources en temps r√©el
	@echo "$(BLUE)üìä Surveillance des ressources (Ctrl+C pour arr√™ter):$(NC)"
	@watch -n 2 'docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"'

reset: clean install ## Reset complet (supprime tout et r√©installe)

# Commande par d√©faut
.DEFAULT_GOAL := help