version: '3.9' # Utilisation d'une version plus récente pour la compatibilité

services:
  # --- Base de données ---
  db:
    image: postgres:15-alpine
    container_name: analylit-db-v4
    volumes:
      - postgres_data_v4:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-analylit_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-strong_password}
      - POSTGRES_DB=${POSTGRES_DB:-analylit_db}
    networks:
      - analylit-network
    restart: unless-stopped

  # --- Cache et File d'attente ---
  redis:
    image: redis:7-alpine
    container_name: analylit-redis-v4
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - analylit-network
    restart: unless-stopped

  # --- Moteur IA ---
  ollama:
    image: ollama/ollama:latest
    container_name: analylit-ollama-v4
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      - ollama_data_v4:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - analylit-network
    restart: unless-stopped

  # --- Serveur Web Applicatif ---
  web:
    image: analylit-web:latest # Nomme l'image construite
    build:
      context: .
      dockerfile: Dockerfile-web-complete
    container_name: analylit-web-v4
    volumes:
      # Utilisation de volumes nommés pour la production
      - projects_data:/app/projects
      - model_cache_data:/app/model_cache
    # En production, il est préférable de gérer les secrets via des orchestrateurs (K8s Secrets, Docker Secrets)
    # ou des variables d'environnement injectées, plutôt qu'un fichier .env sur le serveur.
    env_file: .env
    entrypoint: /home/appuser/app/entrypoint.sh
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - analylit-network
    restart: unless-stopped

  # --- Worker pour les tâches asynchrones ---
  worker:
    image: analylit-worker:latest # Nomme l'image construite
    build:
      context: .
      dockerfile: Dockerfile-worker-complete
    container_name: analylit-worker-v4
    volumes:
      - projects_data:/app/projects
      - model_cache_data:/app/model_cache
    env_file: .env
    command: >
      python -m rq worker -u redis://redis:6379/0 --with-scheduler analylit_processing_v4 analylit_synthesis_v4 analylit_analysis_v4 analylit_background_v4
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_healthy
    deploy:
      replicas: 1
      resources:
        reservations:
          devices: [{ driver: nvidia, count: all, capabilities: [gpu] }]
    networks:
      - analylit-network
    restart: unless-stopped

  # --- Serveur Web Frontend (Nginx) ---
  nginx:
    build:
      context: .
      dockerfile: Dockerfile-nginx
    container_name: analylit-nginx-v4
    ports:
      - "8080:80"
    depends_on:
      web: { condition: service_healthy }
    networks:
      - analylit-network
    restart: unless-stopped

volumes:
  postgres_data_v4:
  ollama_data_v4:
  projects_data: # Volume pour les données des projets
  model_cache_data: # Volume pour le cache des modèles ML

networks:
  analylit-network:
    driver: bridge