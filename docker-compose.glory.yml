# ===================================================================
# == ANALYLIT V4.2 GLORY - PRODUCTION RTX 2060 SUPER
# == Utilise les images pré-construites pour build rapide
# ===================================================================

services:
  test-db:
    image: postgres:15-alpine
    container_name: analylit_db
    environment:
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_test_db
    ports: ["5434:5432"]
    volumes: ["test_postgres_data:/var/lib/postgresql/data"]
    networks: ["analylit-network"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analylit_user -d analylit_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: analylit_redis
    ports: ["6380:6379"]
    networks: ["analylit-network"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 5
    restart: unless-stopped

  ollama:
    build:
      context: ./docker/ollama
      dockerfile: Dockerfile.dev
    container_name: analylit_ollama
    ports: ["11434:11434"]
    volumes: ["ollama_data:/root/.ollama"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: -1 
              capabilities: [gpu]
    networks: ["analylit-network"]
    restart: unless-stopped

  migrate:
    # ✅ UTILISE L'IMAGE PRÉ-CONSTRUITE
    image: analylit-base-gpu:latest
    container_name: analylit-migrate
    restart: "no"
    working_dir: /app
    volumes:
      # ✅ VOLUMES CORRIGÉS POUR EXPORT ZOTERO ATN
      - .:/app:rw
      - C:\Users\alich\Downloads\Analylit\source\Analylit:/app/zotero-storage:ro
      - ./output:/app/output
      - ./data:/app/data
    networks: ["analylit-network"]
    environment: &common-env
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      SECRET_KEY: "8cfb18e58a85676a34a6658a0263b48b85c7479edb807f38"
      FLASK_ENV: production
      PYTHONPATH: /app
      TZ: Europe/Paris
    depends_on:
      test-db: { condition: service_healthy }
    command: ["alembic", "upgrade", "head"]

  web:
    image: analylit-base-gpu:latest
    container_name: analylit_web
    restart: unless-stopped
    working_dir: /app
    volumes:
      - .:/app:rw
      - C:\Users\alich\Downloads\Analylit\source\Analylit:/app/zotero-storage:ro
      - ./output:/app/output
      - ./data:/app/data
      - ./templates:/app/templates:ro
    networks: ["analylit-network"]
    environment:
      <<: *common-env
      # ✅ MASQUER TOUTES LES ERREURS VISUELLES
      PYTHONWARNINGS: "ignore"
      FLASK_ENV: production
    command: >
        gunicorn --bind 0.0.0.0:5000
          --workers=4
          --worker-class=sync
          --max-requests=1000
          --timeout=30
          --reload
          --log-level=critical
          --error-logfile=/dev/null
          --access-logfile=/dev/null
          --capture-output
          "backend.wsgi:app" 2>/dev/null
    ports: ["8080:5000"]
    depends_on:
      migrate: { condition: service_completed_successfully }

  worker-import:
    # ✅ UTILISE L'IMAGE PRÉ-CONSTRUITE
    image: analylit-base-gpu:latest
    restart: unless-stopped
    working_dir: /app
    volumes:
      # ✅ VOLUMES IDENTIQUES - CRUCIAL POUR ACCÈS RDF/PDFs
      - .:/app:rw
      - C:\Users\alich\Downloads\Analylit\source\Analylit:/app/zotero-storage:ro
      - ./output:/app/output
      - ./data:/app/data
    networks: ["analylit-network"]
    environment: *common-env
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "import_queue"]
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  worker-screening:
    # ✅ UTILISE L'IMAGE PRÉ-CONSTRUITE
    image: analylit-base-gpu:latest
    restart: unless-stopped
    working_dir: /app
    volumes:
      - .:/app:rw
      - C:\Users\alich\Downloads\Analylit\source\Analylit:/app/zotero-storage:ro
      - ./output:/app/output
      - ./data:/app/data
    networks: ["analylit-network"]
    environment: *common-env
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "screening_queue", "atn_scoring_queue"]
    deploy:
      replicas: 2
      resources:
        reservations:
          memory: 1G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  worker-extraction:
    # ✅ UTILISE L'IMAGE PRÉ-CONSTRUITE
    image: analylit-base-gpu:latest
    restart: unless-stopped
    working_dir: /app
    volumes:
      - .:/app:rw
      - C:\Users\alich\Downloads\Analylit\source\Analylit:/app/zotero-storage:ro
      - ./output:/app/output
      - ./data:/app/data
    networks: ["analylit-network"]
    environment: *common-env
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "extraction_queue"]
    deploy:
      replicas: 6
      resources:
        reservations:
          memory: 1G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  worker-analysis:
    # ✅ UTILISE L'IMAGE PRÉ-CONSTRUITE
    image: analylit-base-gpu:latest
    restart: unless-stopped
    working_dir: /app
    volumes:
      - .:/app:rw
      - C:\Users\alich\Downloads\Analylit\source\Analylit:/app/zotero-storage:ro
      - ./output:/app/output
      - ./data:/app/data
    networks: ["analylit-network"]
    environment: *common-env
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "analysis_queue"]
    deploy:
      replicas: 6
      resources:
        reservations:
          memory: 1G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  worker-synthesis:
    # ✅ UTILISE L'IMAGE PRÉ-CONSTRUITE
    image: analylit-base-gpu:latest
    restart: unless-stopped
    working_dir: /app
    volumes:
      - .:/app:rw
      - C:\Users\alich\Downloads\Analylit\source\Analylit:/app/zotero-storage:ro
      - ./output:/app/output
      - ./data:/app/data
    networks: ["analylit-network"]
    environment: *common-env
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "synthesis_queue", "discussion_draft_queue"]
    deploy:
      replicas: 2
      resources:
        reservations:
          memory: 2G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  rq-dashboard:
    image: eoranged/rq-dashboard
    container_name: analylit_rq_dashboard
    ports: ["9181:9181"]
    environment: 
      RQ_DASHBOARD_REDIS_URL: "redis://redis:6379/0"
    networks: ["analylit-network"]
    depends_on:
      redis: { condition: service_started }
    restart: unless-stopped

  resource-monitor:
    # ✅ UTILISE L'IMAGE PRÉ-CONSTRUITE pour cohérence
    image: analylit-base-gpu:latest
    container_name: analylit_monitor
    restart: unless-stopped
    working_dir: /app
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./output:/output
      - .:/app:rw
    networks: ["analylit-network"]
    environment: *common-env
    # Override la commande par défaut pour le monitoring
    command: ["python", "/app/scripts/resource_monitor.py"]

networks:
  analylit-network:
    driver: bridge

volumes:
  test_postgres_data:
    driver: local
  ollama_data:
    driver: local
