services:
  test-db:
    image: postgres:15-alpine
    container_name: analylit_db
    environment:
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_test_db
    ports: ["5434:5432"]
    volumes: ["test_postgres_data:/var/lib/postgresql/data"]
    networks: ["analylit-network"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analylit_user -d analylit_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: analylit_redis
    ports: ["6380:6379"]
    networks: ["analylit-network"]
    restart: unless-stopped

  ollama:
    build:
      context: ./docker/ollama
      dockerfile: Dockerfile.dev
    container_name: analylit_ollama
    ports: ["11434:11434"]
    volumes: ["ollama_data:/root/.ollama"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks: ["analylit-network"]
    restart: unless-stopped

  migrate:
    build:
      context: .
      dockerfile: docker/Dockerfile.migrate
    container_name: analylit-migrate
    restart: "no"
    networks: [analylit-network]
    working_dir: /app
    volumes: [".:/app:rw", "./source:/app/source", "./zotero-storage:/app/zotero-storage"]
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /app
      TZ: Europe/Paris
    depends_on:
      test-db: { condition: service_healthy }
    command: ["alembic", "upgrade", "head"]

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_web
    restart: unless-stopped
    networks: [analylit-network]
    working_dir: /app
    volumes: [".:/app:rw", "./source:/app/source", "./zotero-storage:/app/zotero-storage"]
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /app
      TZ: Europe/Paris
    command: gunicorn --bind 0.0.0.0:5000 --workers=4 --worker-class=geventwebsocket.gunicorn.workers.GeventWebSocketWorker "backend.wsgi:app"
    ports: ["8080:5000"]
    depends_on:
      migrate: { condition: service_completed_successfully }

  worker-import:
    build: { context: ., dockerfile: docker/Dockerfile.worker }
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "import_queue"]
    restart: unless-stopped
    networks: [analylit-network]
    working_dir: /app
    volumes: [".:/app:rw", "./source:/app/source", "./zotero-storage:/app/zotero-storage"]
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /app
      TZ: Europe/Paris
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # ... (Définissez les autres workers sur ce modèle si nécessaire, pour l'instant, seul import est critique)

  rq-dashboard:
    image: eoranged/rq-dashboard
    ports: ["9181:9181"]
    environment: { RQ_DASHBOARD_REDIS_URL: "redis://redis:6379/0" }
    networks: ["analylit-network"]
    depends_on: ["redis"]
    restart: unless-stopped

  resource-monitor:
    build: { context: ./docker, dockerfile: Dockerfile.monitor }
    container_name: analylit_monitor
    restart: unless-stopped
    volumes: ["/var/run/docker.sock:/var/run/docker.sock", "./resultats_atn_glory:/output"]
    networks: ["analylit-network"]

networks:
  analylit-network:
    driver: bridge

volumes:
  test_postgres_data:
  ollama_data:
