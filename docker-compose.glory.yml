# version: '3.9' # L'attribut 'version' est obsolète, nous le retirons pour la propreté.

x-common-config: &common-config
  restart: unless-stopped
  working_dir: /app
  volumes:
    - .:/app:rw
    - ./source:/app/source
    - ./zotero-storage:/app/zotero-storage
  networks:
    - analylit-network
  environment:
    &common-env
    DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
    REDIS_URL: redis://redis:6379/0
    OLLAMA_BASE_URL: http://ollama:11434
    PYTHONPATH: /app
    TZ: Europe/Paris

x-gpu-resources: &gpu-resources
  deploy:
    resources:
      reservations:
        devices:
          - driver: nvidia
            count: 1
            capabilities: [gpu]

services:
  # --- INFRASTRUCTURE ---
  test-db:
    image: postgres:15-alpine
    container_name: analylit_db
    environment:
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_test_db
    ports: ["5434:5432"]
    volumes: ["test_postgres_data:/var/lib/postgresql/data"]
    networks: ["analylit-network"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analylit_user -d analylit_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: analylit_redis
    ports: ["6380:6379"]
    networks: ["analylit-network"]
    restart: unless-stopped

  ollama:
    build:
      context: ./docker/ollama
      dockerfile: Dockerfile.dev
    container_name: analylit_ollama
    ports: ["11434:11434"]
    volumes: ["ollama_data:/root/.ollama"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks: ["analylit-network"]
    restart: unless-stopped

  # --- SERVICES APPLICATIFS ---
  migrate:
    build:
      context: .
      dockerfile: docker/Dockerfile.migrate
    container_name: analylit-migrate
    <<: *common-config
    depends_on:
      test-db: { condition: service_healthy }
    environment:
      <<: *common-env
    # ULTIME CORRECTION : On utilise la commande directe et robuste de l'environnement de dev
    command: ["alembic", "upgrade", "head"]
    restart: "no"

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_web
    <<: *common-config
    command: gunicorn --bind 0.0.0.0:5000 --workers=4 --worker-class=geventwebsocket.gunicorn.workers.GeventWebSocketWorker "backend.wsgi:app"
    ports: ["8080:5000"]
    depends_on:
      migrate: { condition: service_completed_successfully }

  # --- WORKERS ---
  worker-import:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    <<: *common-config
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "import_queue"]
    deploy: { replicas: 1 }
    resources: 
        limits:
          memory: 4G
        reservations:
          memory: 2G

  worker-screening:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    <<: [*common-config, *gpu-resources]
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "screening_queue", "atn_scoring_queue"]
    deploy: { replicas: 2 }
    resources:
        reservations:
          memory: 1G

  worker-extraction:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    <<: [*common-config, *gpu-resources]
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "extraction_queue"]
    deploy: { replicas: 6 }
    resources:
        reservations:
          memory: 1G

  worker-analysis:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    <<: [*common-config, *gpu-resources]
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "analysis_queue"]
    deploy: { replicas: 6 }
    resources:
        reservations:
          memory: 1G

  worker-synthesis:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    <<: [*common-config, *gpu-resources]
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "synthesis_queue", "discussion_draft_queue"]
    deploy: { replicas: 2 }
    resources:
        reservations:
          memory: 2G

  # --- MONITORING ---
  rq-dashboard:
    image: eoranged/rq-dashboard
    ports: ["9181:9181"]
    environment: { RQ_DASHBOARD_REDIS_URL: "redis://redis:6379/0" }
    networks: ["analylit-network"]
    depends_on: ["redis"]
    restart: unless-stopped

  resource-monitor:
    build:
      context: ./docker
      dockerfile: Dockerfile.monitor
    container_name: analylit_monitor
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./resultats_atn_glory:/output
    networks: ["analylit-network"]

networks:
  analylit-network:
    driver: bridge

volumes:
  test_postgres_data:
  ollama_data:
