services:
  # Images de base
  base-cpu:
    build:
      context: .
      dockerfile: docker/Dockerfile.base-cpu
    image: analylit-base-cpu:latest
    pull_policy: never
    profiles: ["build-only"]
    networks:
      - analylit-network

  # Base de données pour les tests
  test-db:
    image: postgres:15-alpine
    container_name: analylit_test_db
    environment:
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_test_db
    ports:
      - "5434:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    networks:
      - analylit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analylit_user -d analylit_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis pour les tests
  redis:
    image: redis:7-alpine
    container_name: analylit_redis_dev
    ports:
      - "6380:6379"
    command: ["redis-server", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - analylit-network

  # Service de migration
  migrate:
    container_name: analylit_migrate_dev
    build:
      context: .
      dockerfile: docker/Dockerfile.migrate
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      PYTHONUNBUFFERED: 1
      PYTHONPATH: /home/appuser/app
    command: ["python", "-m", "alembic", "-c", "alembic.ini", "upgrade", "head"]
    depends_on:
      test-db:
        condition: service_healthy
    volumes:
      - .:/home/appuser/app:ro
    networks: 
      - analylit-network

  # Service web principal
  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    image: analylit-web-dev:latest
    container_name: analylit_web_dev
    command: ["python", "backend/server_v4_complete.py"]
    environment:
      FLASK_ENV: development
      FLASK_APP: backend/server_v4_complete.py
      DB_HOST: test-db
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      REDIS_HOST: redis
      PYTHONPATH: /home/appuser/app
    volumes:
      - .:/home/appuser/app
    depends_on:
      test-db:
        condition: service_healthy
      redis:
        condition: service_started
      migrate:
        condition: service_completed_successfully
    networks:
      - analylit-network
    ports:
      - "8080:5000"

  # Service de tests
  test-runner:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    image: analylit-web-dev:latest
    container_name: analylit_test_runner
    environment:
      FLASK_ENV: development
      FLASK_APP: backend/server_v4_complete.py
      DB_HOST: test-db
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      REDIS_HOST: redis
      PYTHONPATH: /home/appuser/app
    volumes:
      - .:/home/appuser/app
    depends_on:
      test-db:
        condition: service_healthy
      redis:
        condition: service_started
      migrate:
        condition: service_completed_successfully
    networks:
      - analylit-network

  # WORKERS OPTIMISÉS - CONFIGURATIONS CORRECTES
  
  # Worker principal - Analyses
  test-worker-analysis:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    container_name: analylit_worker_analysis
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "analysis", "analysis_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      PYTHONPATH: /home/appuser/app
      DATABASE_HOST: test-db
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_test_db
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network

  # Worker synthèse
  test-worker-synthesis:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    container_name: analylit_worker_synthesis
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "synthesis_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      PYTHONPATH: /home/appuser/app
      DATABASE_HOST: test-db
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_test_db
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network

  # Worker background/général
  test-worker-background:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    container_name: analylit_worker_background
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "default", "background_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      PYTHONPATH: /home/appuser/app
      DATABASE_HOST: test-db
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_test_db
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network

  # Worker discussions
  test-worker-discussion:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    container_name: analylit_worker_discussion
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "discussion_draft_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      PYTHONPATH: /home/appuser/app
      DATABASE_HOST: test-db
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_test_db
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network

  # MONITORING - RQ Dashboard
  rq-dashboard:
    image: eoranged/rq-dashboard
    container_name: analylit_rq_dashboard
    ports:
      - "9181:9181"
    environment:
      RQ_DASHBOARD_REDIS_URL: redis://redis:6379/0
    depends_on:
      redis:
        condition: service_started
    networks:
      - analylit-network

networks:
  analylit-network:
    driver: bridge

volumes:
  test_postgres_data: