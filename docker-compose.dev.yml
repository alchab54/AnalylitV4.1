# Fichier d'override pour le développement local
# Utilisation: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

# ✅ OPTIMISATION: Utilisation des profils pour séparer les services.
# Le profil "dev" inclut les services et configurations spécifiques au développement.

services:
  web:
    # ✅ DEV MODE: Utiliser le serveur de développement Flask avec rechargement automatique.
    command: flask run --host=0.0.0.0 --port=5000 --debug
    environment:
      # ✅ OPTIMISATION: FLASK_ENV=development active le mode debug, le reloader, etc.
      - FLASK_ENV=development
      # ✅ CORRECTION: Indiquer à Flask quelle application lancer en mode développement.
      - FLASK_APP=backend/manage.py
      - DB_HOST=test-db # Pointer vers la base de données de test
    volumes:
      # Monter le code source pour le rechargement à chaud
      - ./api:/home/appuser/app/api
      - ./backend:/home/appuser/app/backend
      - ./scripts:/home/appuser/app/scripts
      - ./utils:/home/appuser/app/utils
      - ./web:/home/appuser/app/web
      - ./migrations:/home/appuser/app/migrations
      - ./alembic.ini:/home/appuser/app/alembic.ini
      - ./pytest.ini:/home/appuser/app/pytest.ini
    # ✅ CORRECTION: Fusionner les dépendances de dev avec celles de prod.
    # La section 'depends_on' dans ce fichier remplace celle du fichier de base,
    # il faut donc ré-inclure toutes les dépendances nécessaires.
    depends_on:
      migrate:
        condition: service_completed_successfully
      test-db:
        condition: service_started
      ollama:
        condition: service_healthy
      redis:
        condition: service_started

  test-db:
    image: postgres:15-alpine
    container_name: analylit_test_db
    environment:
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_test_db # Base séparée pour tests
    # La valeur correcte est "read committed" avec un espace.
    # L'utilisation de la liste garantit que les guillemets sont correctement interprétés.
    command: ["postgres", "-c", "default_transaction_isolation=read committed", "-c", "log_statement=all"]
    tmpfs:
      - /var/lib/postgresql/data # Base temporaire en RAM
    # Ce service ne sera démarré qu'avec le profil "dev"
    profiles:
      - dev

  worker-fast:
    volumes:
      # ✅ CORRECTION: Ajouter les volumes pour le rechargement à chaud du code des workers.
      - ./backend:/home/appuser/app/backend
      - ./api:/home/appuser/app/api
      - ./utils:/home/appuser/app/utils

  worker-default:
    volumes:
      # ✅ CORRECTION: Ajouter les volumes pour le rechargement à chaud du code des workers.
      - ./backend:/home/appuser/app/backend
      - ./api:/home/appuser/app/api
      - ./utils:/home/appuser/app/utils

  worker-ai:
    volumes:
      # ✅ CORRECTION: Ajouter les volumes pour le rechargement à chaud du code des workers.
      - ./backend:/home/appuser/app/backend
      - ./api:/home/appuser/app/api
      - ./utils:/home/appuser/app/utils
    # ✅ CORRECTION: S'assurer que le worker IA attend aussi les services critiques.
    depends_on:
      redis:
        condition: service_started
      ollama:
        condition: service_healthy

  migrate:
    # En mode dev, on veut aussi que migrate utilise les derniers fichiers locaux
    volumes:
      - ./api:/home/appuser/app/api
      - ./backend:/home/appuser/app/backend
      - ./scripts:/home/appuser/app/scripts
      - ./utils:/home/appuser/app/utils
      - ./migrations:/home/appuser/app/migrations
      - ./alembic.ini:/home/appuser/app/alembic.ini
      - ./scripts/entrypoint.sh:/home/appuser/app/entrypoint.sh # ✅ CORRECTION: Utiliser le bon chemin source pour le script.
    # ✅ CORRECTION DEV: Surcharger l'environnement pour pointer vers la base de test.
    environment:
      - DATABASE_URL=postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      - SCHEMA_NAME=analylit_schema
      - DB_HOST=test-db # Pointer vers la base de données de test
    depends_on:
      test-db:
        condition: service_started