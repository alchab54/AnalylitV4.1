version: '3.8'

services:
  # Images de base construites localement (profil build-only pour GPU)
  base-cpu:
    build:
      context: .
      dockerfile: docker/Dockerfile.base-cpu
    image: analylit-base-cpu:latest
    pull_policy: never
    profiles: ["build-only"]
    networks:
      - analylit-network

  test-db:
    image: postgres:15-alpine
    container_name: analylit_test_db
    environment:
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_test_db
    ports:
      - "5434:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analylit_user -d analylit_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - analylit-network

  redis:
    image: redis:7-alpine
    container_name: analylit_redis_dev
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - analylit-network

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    image: analylit-web-dev:latest
    container_name: analylit_web_dev
    environment:
      FLASK_ENV: development
      FLASK_APP: backend/server_v4_complete.py
      DATABASE_HOST: test-db
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_test_db
      POSTGRES_PORT: 5432
      PYTHONPATH: /home/appuser/app
      WAIT_HOSTS: test-db:5432,redis:6379
      REDIS_URL: redis://redis:6379/0
      REDIS_HOST: redis
    volumes:
      # Code en lecture seule
      - ./api:/home/appuser/app/api:ro
      - ./scripts:/home/appuser/app/scripts:ro
      - ./utils:/home/appuser/app/utils:ro
      - ./web:/home/appuser/app/web:ro
      - ./migrations:/home/appuser/app/migrations:ro
      - ./alembic.ini:/home/appuser/app/alembic.ini:ro
      - ./tests:/home/appuser/app/tests:ro
      - ./pytest.ini:/home/appuser/app/pytest.ini:ro
      # Backend en lecture-écriture pour permettre le logging
      - ./backend:/home/appuser/app/backend
      # Volumes séparés pour les données
      - dev_logs:/home/appuser/app/logs
      - dev_projects:/home/appuser/app/projects
    depends_on:
      test-db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - analylit-network
    ports:
      - "5000:80"

  nginx:
    image: nginx:1.25-alpine
    container_name: analylit_nginx_dev
    ports:
      - "8080:80"
    volumes:
      - ./web:/usr/share/nginx/html:ro
      - ./docker/nginx.dev.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      web:
        condition: service_started
    restart: unless-stopped
    networks:
      - analylit-network

  migrate:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    image: analylit-migrate:latest
    container_name: analylit_migrate_dev
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      FLASK_APP: backend/server_v4_complete.py
      DATABASE_HOST: test-db
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_test_db
      POSTGRES_PORT: 5432
      PYTHONPATH: /home/appuser/app
      WAIT_HOSTS: test-db:5432
    command: |
      sh -c "
        ./scripts/wait-for-it.sh test-db:5432 --timeout=60 -- 
        python -m alembic -c /home/appuser/app/alembic.ini downgrade base && 
        python -m alembic -c /home/appuser/app/alembic.ini upgrade head
      "
    volumes:
      - ./backend:/home/appuser/app/backend:ro
      - ./api:/home/appuser/app/api:ro
      - ./utils:/home/appuser/app/utils:ro
      - ./migrations:/home/appuser/app/migrations:ro
      - ./alembic.ini:/home/appuser/app/alembic.ini:ro
      - ./scripts:/home/appuser/app/scripts:ro
    depends_on:
      test-db:
        condition: service_healthy
    networks:
      - analylit-network
    restart: "no"

  # ✅ SERVICE TEST POUR DÉVELOPPEMENT
  test:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    command: ["pytest", "-v", "--tb=short", "--maxfail=5"]
    depends_on:
      test-db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      # ✅ Utiliser la DB de test séparée
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      DATABASE_HOST: test-db
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_test_db
      POSTGRES_PORT: 5432
      # ✅ Configuration Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_HOST: redis
      # ✅ Configuration pour les tests
      FLASK_ENV: testing
      TESTING: "true"
      PYTHONPATH: /home/appuser/app:/home/appuser/.local/lib/python3.11/site-packages
    volumes:
      - .:/home/appuser/app
      - dev_logs:/home/appuser/app/logs
      - dev_projects:/home/appuser/app/projects
    networks:
      - analylit-network
    profiles: ["test"]

volumes:
  test_postgres_data:
  dev_logs:
  dev_projects:

networks:
  analylit-network:
    driver: bridge
