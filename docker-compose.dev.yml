services:
  test-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "discussion_draft_queue", "analysis", "default"]
    depends_on:
      - redis
      - test-db
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      PYTHONPATH: /home/appuser/app
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network

  test-db:
    image: postgres:15-alpine
    container_name: analylit_test_db
    environment:
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_test_db
    ports:
      - "5434:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analylit_user -d analylit_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - analylit-network

  redis:
    image: redis:7-alpine
    container_name: analylit_redis_dev
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - analylit-network

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    image: analylit-web-dev:latest
    container_name: analylit_web_dev
    environment:
      FLASK_ENV: development
      FLASK_APP: backend/server_v4_complete.py
      DATABASE_HOST: test-db
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      REDIS_HOST: redis
      PYTHONPATH: /home/appuser/app
    volumes:
      - .:/home/appuser/app
    depends_on:
      test-db:
        condition: service_healthy
      redis:
        condition: service_started
      migrate:
        condition: service_completed_successfully
    networks:
      - analylit-network
    # Le port n'est pas nécessaire pour exec, mais on le garde pour le débogage
    ports:
      - "5000:80"

  migrate:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    image: analylit-migrate:latest
    container_name: analylit_migrate_dev
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      PYTHONPATH: /home/appuser/app
      # ✅ CORRECTION FINALE : La variable doit pointer vers le bon service DB
      WAIT_HOSTS: test-db:5432
    command: |
      sh -c "
        ./scripts/wait-for-it.sh test-db:5432 --timeout=60 -- 
        python -m alembic -c /home/appuser/app/alembic.ini upgrade head
      "
    volumes:
      - .:/home/appuser/app:ro
    depends_on:
      test-db:
        condition: service_healthy
    networks:
      - analylit-network
    restart: "no"

volumes:
  test_postgres_data:

networks:
  analylit-network:
    driver: bridge
