# ================================================================
# ANALYLIT V4.2 - ARCHITECTURE HAUTE PERFORMANCE
# ================================================================
# Workflow séquentiel ATN + Multi-workers + Optimisation GPU
# ================================================================

services:
  # ================================================================
  # === IMAGES DE BASE
  # ================================================================
  
  base-cpu:
    build:
      context: .
      dockerfile: docker/Dockerfile.base-cpu
    image: analylit-base-cpu:latest
    pull_policy: never
    profiles: ["build-only"]
    networks:
      - analylit-network

  # ================================================================
  # === INFRASTRUCTURE DE BASE
  # ================================================================

  # Base de données PostgreSQL
  test-db:
    image: postgres:15-alpine
    container_name: analylit_test_db
    environment:
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_test_db
      TZ: Europe/Paris
    ports:
      - "5434:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    networks:
      - analylit-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U analylit_user -d analylit_test_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Redis pour les queues RQ
  redis:
    image: redis:7-alpine
    container_name: analylit_redis_dev
    ports:
      - "6380:6379"
    command: ["redis-server", "--maxmemory", "2gb", "--maxmemory-policy", "allkeys-lru"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - analylit-network
    restart: unless-stopped

  # Ollama avec optimisation GPU
  ollama:
    image: ollama/ollama:latest
    container_name: analylit_ollama_dev
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      - OLLAMA_NUM_PARALLEL=6        # ✅ OPTIMISÉ: 6 workers screening
      - OLLAMA_MAX_LOADED_MODELS=3   # ✅ 3 modèles en mémoire RTX 2060
      - NVIDIA_VISIBLE_DEVICES=all
      - OLLAMA_GPU_LAYERS=35 
      - TZ=Europe/Paris
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - analylit-network
    # healthcheck:
      # test: ["CMD", "curl", "-f", "http://localhost:11434"]
      # interval: 20s
      # timeout: 15s
      # retries: 5
    restart: unless-stopped

  # ================================================================
  # === SERVICES PRINCIPAUX
  # ================================================================

  # Service de migration
  migrate:
    container_name: analylit_migrate_dev
    build:
      context: .
      dockerfile: docker/Dockerfile.migrate
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      PYTHONUNBUFFERED: 1
      PYTHONPATH: /home/appuser/app
      TZ: Europe/Paris
    command: ["python", "-m", "alembic", "-c", "alembic.ini", "upgrade", "head"]
    depends_on:
      test-db:
        condition: service_healthy
    volumes:
      - .:/home/appuser/app:rw
    networks: 
      - analylit-network

  # Service web principal
  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    image: analylit-web-dev:latest
    container_name: analylit_web_dev
    command: ["python", "backend/server_v4_complete.py"]
    environment:
      FLASK_ENV: development
      FLASK_APP: backend/server_v4_complete.py
      DB_HOST: test-db
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      REDIS_HOST: redis
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      # ✅ SCORING ATN ACTIVÉ
      ATN_SCORING_ENABLED: "true"
      ATN_ALGORITHM_VERSION: "2.1"
      ATN_SHOW_JUSTIFICATIONS: "true"
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    depends_on:
      test-db:
        condition: service_healthy
      redis:
        condition: service_started
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    networks:
      - analylit-network
    ports:
      - "8080:5000"
    restart: unless-stopped

  # Service de tests
  test-runner:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    image: analylit-web-dev:latest
    container_name: analylit_test_runner
    environment:
      FLASK_ENV: development
      FLASK_APP: backend/server_v4_complete.py
      DB_HOST: test-db
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      REDIS_HOST: redis
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    depends_on:
      test-db:
        condition: service_healthy
      redis:
        condition: service_started
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    networks:
      - analylit-network

  # ================================================================
  # === WORKERS SPÉCIALISÉS - PIPELINE SÉQUENTIEL ATN
  # ================================================================

  # --- ÉTAPE 1: IMPORT ARTICLES + PDFs (2 WORKERS RAPIDES) ---
  
  worker-import-1:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    container_name: analylit_worker_import_1
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "import_queue", "--with-scheduler"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: import
      WORKER_ID: import-1
      TZ: Europe/Paris

    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network
    restart: unless-stopped

  worker-import-2:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    container_name: analylit_worker_import_2
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "import_queue", "background_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: import
      WORKER_ID: import-2
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network
    restart: unless-stopped

  # --- ÉTAPE 2: SCREENING ATN (3 WORKERS IA LÉGÈRE) ---
  
  worker-screening-1:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker_screening_1
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "screening_queue", "atn_scoring_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: screening_optimized
      WORKER_ID: screening-1
      PREFERRED_MODEL: phi3:mini
      # ✅ SCORING ATN ACTIVÉ
      ATN_SCORING_ENABLED: "true"
      ATN_DETAILED_LOGGING: "true"
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network
    restart: unless-stopped

  worker-screening-2:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker_screening_2
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "screening_queue", "atn_scoring_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: screening_optimized
      WORKER_ID: screening-2
      PREFERRED_MODEL: phi3:mini
      ATN_SCORING_ENABLED: "true"
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network
    restart: unless-stopped

  worker-screening-3:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker_screening_3
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "screening_queue", "atn_scoring_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: screening_optimized
      WORKER_ID: screening-3
      PREFERRED_MODEL: phi3:mini
      ATN_SCORING_ENABLED: "true"
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network
    restart: unless-stopped

  # ✅ NOUVEAUX WORKERS SCREENING (4-6)
  worker-screening-4:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker_screening_4
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "screening_queue", "atn_scoring_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: screening_optimized
      WORKER_ID: screening-4
      PREFERRED_MODEL: phi3:mini
      ATN_SCORING_ENABLED: "true"
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network
    restart: unless-stopped

  worker-screening-5:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker_screening_5
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "screening_queue", "atn_scoring_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: screening_optimized
      WORKER_ID: screening-5
      PREFERRED_MODEL: phi3:mini
      ATN_SCORING_ENABLED: "true"
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network
    restart: unless-stopped

  worker-screening-6:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker_screening_6
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "screening_queue", "atn_scoring_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: screening_optimized
      WORKER_ID: screening-6
      PREFERRED_MODEL: phi3:mini
      ATN_SCORING_ENABLED: "true"
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network
    restart: unless-stopped

  # --- ÉTAPE 3: EXTRACTION ATN (4 WORKERS IA LOURDE + GPU) ---
  
  worker-extraction-1:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    container_name: analylit_worker_extraction_1
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "extraction_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: extraction
      WORKER_ID: extraction-1
      PREFERRED_MODEL: llama3:8b  # Modèle lourd pour extractions
      # ✅ OPTIMISATION GPU RTX 2060
      CUDA_VISIBLE_DEVICES: "0"
      OLLAMA_GPU_LAYERS: 35
      OLLAMA_GPU_MEMORY_FRACTION: 0.7
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network
    restart: unless-stopped

  worker-extraction-2:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    container_name: analylit_worker_extraction_2
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "extraction_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: extraction
      WORKER_ID: extraction-2
      # ✅ OPTIMISATION GPU RTX 2060
      CUDA_VISIBLE_DEVICES: "0"
      OLLAMA_GPU_LAYERS: 35
      OLLAMA_GPU_MEMORY_FRACTION: 0.7
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network
    restart: unless-stopped

  worker-extraction-3:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    container_name: analylit_worker_extraction_3
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "extraction_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: extraction
      WORKER_ID: extraction-3
      # ✅ OPTIMISATION GPU RTX 2060
      CUDA_VISIBLE_DEVICES: "0"
      OLLAMA_GPU_LAYERS: 35
      OLLAMA_GPU_MEMORY_FRACTION: 0.7
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network
    restart: unless-stopped

  worker-extraction-4:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    container_name: analylit_worker_extraction_4
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "extraction_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: extraction
      WORKER_ID: extraction-4
      # ✅ OPTIMISATION GPU RTX 2060
      CUDA_VISIBLE_DEVICES: "0"
      OLLAMA_GPU_LAYERS: 35
      OLLAMA_GPU_MEMORY_FRACTION: 0.7
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network
    restart: unless-stopped

  # --- ÉTAPE 4: ANALYSES ATN (2 WORKERS CALCULS) ---
  
  worker-analysis-1:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    container_name: analylit_worker_analysis_1
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "analysis_queue", "atn_scoring_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      RQ_WORKER_TIMEOUT: "600"
      OLLAMA_REQUEST_TIMEOUT: "300"
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: analysis_atn
      # ✅ SCORING ATN INTÉGRÉ
      ATN_SCORING_ENABLED: "true"
      ATN_ALGORITHM_VERSION: "2.1"
      ATN_DETAILED_JUSTIFICATIONS: "true"
      WORKER_ID: analysis-1
      REQUEST_TIMEOUT: "600"        # Au lieu de REQUEST_TIMEOUT=600
      RQ_JOB_TIMEOUT: "600"
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - analylit-network
    restart: unless-stopped
    
  worker-analysis-2:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    container_name: analylit_worker_analysis_2
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "analysis_queue", "atn_scoring_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      RQ_WORKER_TIMEOUT: "600"
      OLLAMA_REQUEST_TIMEOUT: "300"
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: analysis_atn
      # ✅ SCORING ATN INTÉGRÉ
      ATN_SCORING_ENABLED: "true"
      ATN_ALGORITHM_VERSION: "2.1"
      ATN_DETAILED_JUSTIFICATIONS: "true"
      WORKER_ID: analysis-2
      REQUEST_TIMEOUT: "600"        # Au lieu de REQUEST_TIMEOUT=600
      RQ_JOB_TIMEOUT: "600"
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - analylit-network
    restart: unless-stopped

  # --- ÉTAPE 5: SYNTHÈSE + REPORTING (2 WORKERS) ---
  
  worker-synthesis-1:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    container_name: analylit_worker_synthesis_1
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "synthesis_queue", "reporting_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: synthesis
      WORKER_ID: synthesis-1
      PREFERRED_MODEL: llama3:8b  # Modèle performant pour synthèses
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network
    restart: unless-stopped

  worker-synthesis-2:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    container_name: analylit_worker_synthesis_2
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "synthesis_queue", "reporting_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: synthesis
      WORKER_ID: synthesis-2
      PREFERRED_MODEL: llama3:8b
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network
    restart: unless-stopped

  # --- WORKERS SPÉCIAUX ---
  
  # Worker Discussion + Chat RAG
  worker-discussion:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    container_name: analylit_worker_discussion
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "discussion_draft_queue"]
    depends_on:
      redis:
        condition: service_started
      test-db:
        condition: service_healthy
      ollama:
        condition: service_started  
      migrate:
        condition: service_completed_successfully
    environment:
      DATABASE_URL: postgresql://analylit_user:strong_password@test-db:5432/analylit_test_db
      REDIS_URL: redis://redis:6379/0
      OLLAMA_BASE_URL: http://ollama:11434
      PYTHONPATH: /home/appuser/app
      WORKER_TYPE: discussion
      WORKER_ID: discussion-1
      TZ: Europe/Paris
    volumes:
      - .:/home/appuser/app
    networks:
      - analylit-network
    restart: unless-stopped

  # ================================================================
  # === MONITORING & OUTILS
  # ================================================================

  # RQ Dashboard - Monitoring des queues
  rq-dashboard:
    image: eoranged/rq-dashboard
    container_name: analylit_rq_dashboard
    ports:
      - "9181:9181"
    environment:
      RQ_DASHBOARD_REDIS_URL: redis://redis:6379/0
      TZ: Europe/Paris
    depends_on:
      redis:
        condition: service_started
    networks:
      - analylit-network
    restart: unless-stopped

  # Portainer - Gestion Docker (optionnel)
  portainer:
    image: portainer/portainer-ce:latest
    container_name: analylit_portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - analylit-network
    restart: unless-stopped
    profiles: ["monitoring"]

# ================================================================
# === CONFIGURATION RÉSEAU & VOLUMES
# ================================================================

networks:
  analylit-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: analylit-bridge
    external: true
    name: analylit_analylit-network

volumes:
  test_postgres_data:
    driver: local
  ollama_data:
    driver: local
  portainer_data:
    driver: local

# ================================================================
# === CONFIGURATION AVANCÉE
# ================================================================

# Pour démarrer avec monitoring complet :
# docker-compose -f docker-compose.dev.yml --profile monitoring up -d

# Pour build uniquement :  
# docker-compose -f docker-compose.dev.yml --profile build-only build

# Pour démarrage production :
# docker-compose -f docker-compose.dev.yml up -d
