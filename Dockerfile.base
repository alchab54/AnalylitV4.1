# =================================================
# Stage 1: Builder - Compilation des dépendances UNIQUEMENT
# Étape 1: Builder - Pour compiler les dépendances
# =================================================
FROM python:3.11-bookworm as builder

# Installer les dépendances système nécessaires pour la compilation
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    curl \
    nodejs npm \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Créer et activer un environnement virtuel
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# OPTIMISATION CRITIQUE : Copier UNIQUEMENT les fichiers de dépendances
# Ceci permet de maximiser l'utilisation du cache Docker
COPY requirements.txt ./
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt

# Installer les dépendances Node.js - UNIQUEMENT les fichiers de config
WORKDIR /app
COPY package*.json ./
RUN npm ci

# IMPORTANT : Pas de "COPY . ." ici - ceci cassait le cache !
# Le code source sera copié dans l'étape finale uniquement

# =================================================
# Étape 2: Final Stage - Image d'exécution avec code source
# =================================================
FROM python:3.11-slim-bookworm

# --- CORRECTION : Installer les dépendances système ICI ---
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    # Dépendances pour l'extraction PDF robuste (OCR)
    tesseract-ocr \
    tesseract-ocr-fra \
    poppler-utils \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Créer un utilisateur non-root pour la sécurité
RUN useradd --create-home appuser
# Créer les répertoires de données en tant que ROOT
RUN mkdir -p /home/appuser/app/projects /home/appuser/app/model_cache && chown -R appuser:appuser /home/appuser

WORKDIR /home/appuser/app
ENV PYTHONPATH="/home/appuser/app:$PYTHONPATH"

# Copier l'environnement virtuel et les node_modules depuis le builder
# Ces couches seront mises en cache tant que les dépendances ne changent pas.
COPY --from=builder /opt/venv /opt/venv
COPY --from=builder --chown=appuser:appuser /app/node_modules ./node_modules

# MAINTENANT copier le code source de l'application
# Cette couche sera invalidée à chaque modification du code, mais c'est normal
# Les dépendances (étapes précédentes) resteront en cache
COPY --chown=appuser:appuser . .
 
USER appuser
ENV PATH="/opt/venv/bin:$PATH"

# Exposer le port sur lequel l'application s'exécute à l'intérieur du conteneur
EXPOSE 5001