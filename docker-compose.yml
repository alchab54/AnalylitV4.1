services:
  base:
    build:
      context: .
      dockerfile: docker/Dockerfile.base
    image: analylit-base:latest

  db:
    image: postgres:15-alpine
    container_name: analylit_db
    environment:
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-user-db.sql:/docker-entrypoint-initdb.d/init.sql
      # Monter la configuration personnalisée
      - ./database/postgres.conf:/usr/share/postgresql/postgresql.conf.sample
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1500M
        reservations:
          cpus: '1.0'
          memory: 1000M

  redis:
    image: redis:7-alpine
    container_name: analylit_redis
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
    container_name: analylit_web
    ports:
      - "5000:5000"
      - "8080:5000"
    environment:
      # ✅ CORRECTION: Utiliser le nouveau script 'manage.py' comme point d'entrée pour les commandes Flask.
      # Cela suit le pattern standard et évite les initialisations doubles.
      - FLASK_APP=backend/manage.py
      # Essentiel pour que `flask db upgrade` dans entrypoint.sh fonctionne.
      - FLASK_ENV=production
      - WAIT_HOSTS=db:5432,redis:6379,ollama:11434
      - WAIT_TIMEOUT=60
      - WAIT_HOSTS_TIMEOUT=10
      - GUNICORN_WORKERS=2
      - GUNICORN_THREADS=2
      - GUNICORN_TIMEOUT=120
      - PYTHONPATH=/home/appuser/app:/home/appuser/.local/lib/python3.11/site-packages
      - TEST_DATABASE_URL=
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 120s
      resources:
        limits:
          memory: 4000M
        reservations:
          cpus: '1.5'
          memory: 2000M
    # La commande est maintenant aussi dans entrypoint.sh
    command: ["/home/appuser/app/scripts/entrypoint.sh", "start-web"]
    depends_on:
      # ✅ CORRECTION: Le service web attend maintenant que le service migrate ait terminé.
      migrate:
        condition: service_completed_successfully
      base:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_started

    volumes:
      # Volumes pour les données persistantes et les logs
      - ./logs:/home/appuser/app/logs
      - ./projects:/home/appuser/app/projects
      - ./migrations:/home/appuser/app/migrations
      - ./tests:/home/appuser/app/tests
      - ./scripts/run_migrations.py:/home/appuser/app/run_migrations.py
      - ./web:/home/appuser/app/web
      - ./backend:/home/appuser/app/backend
      - ./api:/home/appuser/app/api
      - ./pytest.ini:/home/appuser/app/pytest.ini

  # ✅ NOUVEAU SERVICE: 'migrate' pour les commandes de base de données.
  # Ce service partage l'environnement du service 'web' mais ne lance pas de serveur.
  # Il est utilisé pour exécuter des commandes ponctuelles comme `flask db migrate`.
  migrate:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
    container_name: analylit_migrate
    # Pas de ports exposés, car ce service ne sert qu'à exécuter des commandes.
    environment:
      - FLASK_APP=backend/manage.py
      - FLASK_ENV=production
      - WAIT_HOSTS=db:5432
      - WAIT_TIMEOUT=30
      - PYTHONPATH=/home/appuser/app:/home/appuser/.local/lib/python3.11/site-packages
    env_file:
      - .env
    # ✅ CORRECTION: Ce service exécute maintenant les migrations puis se termine avec succès.
    # La commande est maintenant une liste pour que l'argument "migrate-only" soit correctement interprété.
    command: ["/home/appuser/app/scripts/entrypoint.sh", "migrate-only"]
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./migrations:/home/appuser/app/migrations
      - ./backend:/home/appuser/app/backend
  # Workers multiples pour paralléliser les tâches
  worker-fast:
    build:
      context: .  
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker_fast
    command: rq worker --url redis://redis:6379/0 fast_queue
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 800M
      restart_policy:
        condition: on-failure
        delay: 5s
    depends_on:
      - base

  worker-default:
    build:
      context: .  
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker_default
    command: rq worker --url redis://redis:6379/0 default_queue
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 1000M
      restart_policy:
        condition: on-failure
        delay: 5s
    depends_on:
      - base

  # Worker dédié à l'IA, avec accès au GPU
  worker-ai:
    build:
      context: .  
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker_ai
    command: rq worker --url redis://redis:6379/0 ai_queue background_queue
    env_file:
      - .env
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 1500M
      restart_policy:
        condition: on-failure
        delay: 5s
    depends_on:
      - base

  ollama:
    image: ollama/ollama:latest
    container_name: analylit_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      - CUDA_VISIBLE_DEVICES=0
      - OLLAMA_FLASH_ATTENTION=true
      - OLLAMA_NUM_PARALLEL=2
      - OLLAMA_MAX_LOADED_MODELS=1
    runtime: nvidia
    deploy:
      resources:
        reservations:
          # FIX: Augmenter la mémoire réservée pour Ollama pour éviter les crashs en mode VRAM faible.
          memory: 4000M
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 300s
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434/api/tags || exit 1"]
      interval: 45s
      timeout: 20s
      retries: 10
      start_period: 120s

volumes:
  postgres_data:
  ollama_data:
