# Fichier : docker-compose.yml

services:

  db:
    image: postgres:15-alpine
    container_name: analylit_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5433:5432" # Port externe 5433 pour éviter conflits locaux
    restart: unless-stopped

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7-alpine
    container_name: analylit_redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
    container_name: analylit_web # Ajout du timeout pour laisser le temps aux workers de démarrer
    command: gunicorn --chdir /home/appuser/app --bind 0.0.0.0:5000 --workers 4 --threads 2 --worker-class gevent --timeout 120 "server_v4_complete:app"
    volumes:
      - .:/home/appuser/app
    ports:
      - "5001:5000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
  migrate:
    image: analylit-base # Utilise directement l'image de base, pas de build lent !
    container_name: analylit_migrator
    command: sh docker/migrate.sh
    working_dir: /home/appuser/app
    volumes:
      - .:/home/appuser/app
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy

  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker
    command: rq worker --url redis://redis:6379/0 # Spécifie explicitement la base de données Redis
    working_dir: /home/appuser/app
    volumes:
      - .:/home/appuser/app
    environment:
      - PYTHONPATH=/home/appuser/app
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully

  nginx:
    build:
      context: .
      dockerfile: docker/Dockerfile.nginx
    container_name: analylit_nginx
    ports:
      - "8000:80"
    depends_on:
      web:
        condition: service_started

  tester:
    build:
      context: .
      dockerfile: docker/Dockerfile-tests
    # SIMPLIFIÉ : Le conteneur ne fait que lancer les tests. conftest s'occupe du reste.
    command: >
      sh -c "./wait-for-it.sh db:5432 -t 30 -- pytest -v"
    container_name: analylit_tester
    volumes:
      - .:/home/appuser/app
    environment:
      # CRUCIAL : On surcharge la DATABASE_URL pour pointer vers une BDD de test
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/analylit_test_db
      # CRUCIAL : On corrige le nom d'hôte de Redis pour les tests
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data:
