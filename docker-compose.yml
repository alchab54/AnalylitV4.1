services:
  base:
    build:
      context: .
      dockerfile: docker/Dockerfile.base
    image: analylit-base:latest

  db:
    image: postgres:15-alpine
    container_name: analylit_db
    environment:
      POSTGRES_PASSWORD: password
    # Commandes de tuning PostgreSQL pour la performance
    command: >
      postgres
      -c shared_buffers=2GB
      -c effective_cache_size=8GB
      -c maintenance_work_mem=512MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    deploy:
      resources:
        limits:
          memory: 3500M # Limite stricte
        reservations:
          memory: 2500M # Mémoire réservée
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: analylit_redis
    command: redis-server --maxmemory 2gb --maxmemory-policy allkeys-lru --save 300 10
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 2200M
        reservations:
          memory: 1500M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
    container_name: analylit_web
    ports:
      - "8080:5000"  # Un seul port, plus propre
    environment:
      - FLASK_ENV=production
      - WAIT_HOSTS=db:5432,redis:6379
      - WAIT_TIMEOUT=300
      - GUNICORN_WORKERS=6    # Adapté à votre CPU (supposé 6 cœurs)
      - GUNICORN_THREADS=4    # Plus de threads par worker
      - GUNICORN_TIMEOUT=300  # Timeout de 5min pour les tâches longues
      - TEST_DATABASE_URL=
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 120s
      resources:
        limits:
          memory: 8000M
        reservations:
          memory: 3000M
    # La commande est maintenant dans entrypoint.sh
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./migrations:/home/appuser/app/migrations

  # Workers multiples pour paralléliser les tâches
  worker-fast:
    build:
      context: .  
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker_fast
    command: rq worker --url redis://redis:6379/0 fast_queue
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 1000M
      restart_policy:
        condition: on-failure
        delay: 5s

  worker-default:
    build:
      context: .  
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker_default
    command: rq worker --url redis://redis:6379/0 default_queue
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 1500M
      restart_policy:
        condition: on-failure
        delay: 5s

  # Worker dédié à l'IA, avec accès au GPU
  worker-ai:
    build:
      context: .  
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker_ai
    command: rq worker --url redis://redis:6379/0 ai_queue background_queue
    env_file:
      - .env
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 2000M
      restart_policy:
        condition: on-failure
        delay: 5s

volumes:
  postgres_data: