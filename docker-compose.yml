services:
  # Images de base construites localement (profil build-only pour GPU)
  base-cpu:
    build:
      context: .
      dockerfile: docker/Dockerfile.base-cpu
    image: analylit-base-cpu:latest
    pull_policy: never
    profiles: ["build-only"]
    networks:
      - analylit-network

  base-gpu:
    build:
      context: .
      dockerfile: docker/Dockerfile.base-gpu
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    image: analylit-base-gpu:latest
    pull_policy: never
    profiles: ["build-only"]
    depends_on:
      - base-cpu
    networks:
      - analylit-network

  db:
    image: postgres:15-alpine
    container_name: analylit_db
    environment:
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./database/postgres.conf:/usr/share/postgresql/postgresql.conf.sample:ro
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-analylit_user} -d ${POSTGRES_DB:-analylit_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1500M
        reservations:
          cpus: "1.0"
          memory: 1000M
    restart: unless-stopped
    networks:
      - analylit-network

  redis:
    image: redis:7-alpine
    container_name: analylit_redis
    command: ["redis-server", "--maxmemory", "512mb", "--maxmemory-policy", "allkeys-lru"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    restart: unless-stopped
    networks:
      - analylit-network

  nginx:
    image: nginx:1.25-alpine
    container_name: analylit_nginx_prod
    profiles: ["default", "gpu"]
    ports:
      - "8080:80"
    volumes:
      - ./web:/usr/share/nginx/html:ro
      - ./docker/nginx.prod.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fv", "http://localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - analylit-network

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    image: analylit-web:latest
    container_name: analylit_web
    profiles: ["default", "gpu"]
    ports: []
    environment:
      REDIS_HOST: redis
      FLASK_APP: backend/server_v4_complete.py
      FLASK_ENV: production
      WAIT_HOSTS: db:5432,redis:6379,ollama:11434
      WAIT_TIMEOUT: "60"
      WAIT_HOSTS_TIMEOUT: "10"
      GUNICORN_WORKERS: "2"
      GUNICORN_THREADS: "2"
      GUNICORN_TIMEOUT: "120"
      GUNICORN_CMD_ARGS: "--bind=0.0.0.0:80"
      PYTHONPATH: /home/appuser/app:/home/appuser/.local/lib/python3.11/site-packages
      OLLAMA_BASE_URL: "http://ollama:11434"
      DATABASE_HOST: db
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_db
      POSTGRES_PORT: 5432
    command: ["gunicorn", "--conf", "backend/config/gunicorn.conf.py", "backend.server_v4_complete:app"]
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./logs:/home/appuser/app/logs
      - ./projects:/home/appuser/app/projects
    deploy:
      resources:
        limits:
          memory: 8000M
        reservations:
          cpus: "1.5"
          memory: 4000M
    restart: unless-stopped
    networks:
      - analylit-network

  migrate:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    image: analylit-migrate:latest
    container_name: analylit_migrate
    environment:
      FLASK_ENV: production
      WAIT_HOSTS: db:5432
      WAIT_TIMEOUT: "30"
      PYTHONPATH: /home/appuser/app:/home/appuser/.local/lib/python3.11/site-packages
      FLASK_APP: backend/server_v4_complete.py
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_db
      SCHEMA_NAME: analylit_schema
      DATABASE_URL: postgresql://analylit_user:strong_password@db:5432/analylit_db
    env_file:
      - .env
    command:
      - /bin/sh
      - -c
      - |
        python -m alembic -c /home/appuser/app/alembic.ini downgrade base && python -m alembic -c /home/appuser/app/alembic.ini upgrade head
    depends_on:
      db:
        condition: service_healthy
    volumes: []
    restart: "no"
    networks:
      - analylit-network

  worker-fast:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    image: analylit-worker-fast:latest
    container_name: analylit_worker_fast
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "fast_queue"]
    environment:
      DATABASE_HOST: db
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_db
      POSTGRES_PORT: 5432
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 800M
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_started
    restart: unless-stopped
    networks:
      - analylit-network

  worker-default:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    image: analylit-worker-default:latest
    container_name: analylit_worker_default
    command: ["rq", "worker", "--url", "redis://redis:6379/0", "default_queue"]
    environment:
      DATABASE_HOST: db
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_db
      POSTGRES_PORT: 5432
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 1000M
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_started
    restart: unless-stopped
    networks:
      - analylit-network

  worker-ai:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
      args:
        BASE_IMAGE: analylit-base-gpu:latest
    image: analylit-worker-ai:latest
    container_name: analylit_worker_ai
    command: sh -c "chown -R appuser:appuser /home/appuser/app/projects && exec su appuser -c 'rq worker --url redis://redis:6379/0 ai_queue background_queue analysis_queue extension_queue'"
    env_file:
      - .env
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: ["gpu"]
        limits:
          memory: 1500M
    user: root
    environment:
      DATABASE_HOST: db
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_db
      POSTGRES_PORT: 5432
      NVIDIA_VISIBLE_DEVICES: "all"
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_started
    restart: unless-stopped
    networks:
      - analylit-network

  ollama:
    image: ollama/ollama:latest
    container_name: analylit_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0
      OLLAMA_ORIGINS: "*"
      CUDA_VISIBLE_DEVICES: "0"
      OLLAMA_FLASH_ATTENTION: "true"
      OLLAMA_NUM_PARALLEL: "2"
      OLLAMA_MAX_LOADED_MODELS: "1"
    deploy:
      resources:
        reservations:
          memory: 4000M
          cpus: "1.0"
    healthcheck:
      test: ["CMD-SHELL", "ollama list"]
      interval: 45s
      timeout: 20s
      retries: 10
      start_period: 120s
    networks:
      - analylit-network
    profiles: ["default", "gpu"]
    restart: unless-stopped

  # ✅ SERVICE TEST POUR PRODUCTION
  test:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      args:
        BASE_IMAGE: analylit-base-cpu:latest
    command: ["pytest", "-v", "--tb=short", "--maxfail=5"]
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      # ✅ Utiliser la DB de production
      DATABASE_URL: postgresql://analylit_user:strong_password@db:5432/analylit_db
      DATABASE_HOST: db
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_db
      POSTGRES_PORT: 5432
      # ✅ Configuration Redis
      REDIS_URL: redis://redis:6379/0
      REDIS_HOST: redis
      # ✅ Configuration pour les tests
      FLASK_ENV: testing
      TESTING: "true"
      PYTHONPATH: /home/appuser/app:/home/appuser/.local/lib/python3.11/site-packages
    volumes:
      - .:/home/appuser/app
      - ./logs:/home/appuser/app/logs
      - ./projects:/home/appuser/app/projects
    networks:
      - analylit-network
    profiles: ["test"]

volumes:
  postgres_data:
  ollama_data:

networks:
  analylit-network:
    driver: bridge