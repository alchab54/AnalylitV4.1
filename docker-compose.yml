services:
  # üèóÔ∏è IMAGE DE BASE - Construite une seule fois avec toutes les d√©pendances
  base:
    build:
      context: .
      dockerfile: Dockerfile.base
      target: base
    image: analylit-base:latest
    # Ce service ne d√©marre pas, il sert juste √† construire l'image

  db:
    image: postgres:15-alpine
    container_name: analylit_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-analylit}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-user-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: analylit_redis

  # üåê WEB - Utilise l'image de base (ZERO r√©installation)
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    image: analylit-web:latest
    container_name: analylit_web
    ports:
      - "5001:5000"
      - "8000:5000"
    environment:
      - FLASK_ENV=production
    env_file:
      - .env
    volumes:
      - .:/home/appuser/app
    depends_on:
      base:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      redis:
        condition: service_started

  # üë∑ WORKER - Utilise la m√™me image de base (ZERO r√©installation)
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker  
    image: analylit-worker:latest
    container_name: analylit_worker
    command: python -m rq_worker -w rq.worker.SimpleWorker -c app.rq_config
    env_file:
      - .env
    volumes:
      - .:/home/appuser/app
    depends_on:
      base:
        condition: service_completed_successfully
      redis:
        condition: service_started
      db:
        condition: service_healthy

volumes:
  postgres_data: