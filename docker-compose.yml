# Fichier : docker-compose.yml

services:
  # NOUVEAU : On dit à Docker COMMENT construire l'image de base
  base:
    build:
      context: .
      dockerfile: docker/Dockerfile.base
    image: analylit-base
    profiles: [ "base-builder" ] # Ne s'exécute que si on l'appelle explicitement

  db:
    image: postgres:15-alpine
    container_name: analylit_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # MODIFIÉ : Chemin du script SQL corrigé
      - ./init-user-db.sql:/docker-entrypoint-initdb.d/init-user-db.sql # MODIFIÉ : Chemin du script SQL corrigé
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5433:5432" # Port externe 5433 pour éviter conflits locaux
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: analylit_redis
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
    container_name: analylit_web
    command: gunicorn --chdir /home/appuser/app --bind 0.0.0.0:5000 --workers 4 --threads 2 --worker-class gevent "server_v4_complete:app"
    volumes:
      - .:/home/appuser/app
    ports:
      - "5001:5000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    env_file:
      - .env
    # MODIFIÉ : On s'assure que la base est construite AVANT le web
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started

  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker # Point RQ to the Flask app to load the context
    command: rq worker --url redis://redis:6379
    working_dir: /home/appuser/app
    volumes:
      - .:/home/appuser/app
    environment:
      - PYTHONPATH=/home/appuser/app
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    env_file:
      - .env
    # MODIFIÉ : On s'assure que la base est construite AVANT le worker
    depends_on:
      redis:
        condition: service_started

  nginx:
    build:
      context: .
      dockerfile: docker/Dockerfile.nginx
    container_name: analylit_nginx
    ports:
      - "8000:80"
    depends_on:
      - web

  tester:
    build:
      context: .
      dockerfile: docker/Dockerfile-tests
    command: sh -c "PGPASSWORD=strong_password psql -h db -U analylit_user -c \"CREATE DATABASE analylit_db_test;\" && ./wait-for-it.sh db:5432 -t 30 -- python init_test_db.py && pytest"
    container_name: analylit_tester
    volumes:
      - .:/home/appuser/app
    environment:
      - PYTHONPATH=/home/appuser/app
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/analylit_db_test # CORRIGÉ : Pointe vers la BDD de test
    env_file:
      - .env
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started

volumes:
  postgres_data:
