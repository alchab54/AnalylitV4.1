services:
  base:
    build:
      context: .
      dockerfile: docker/Dockerfile.base
    image: analylit-base:latest

  db:
    image: postgres:15-alpine
    container_name: analylit_db
    environment:
      POSTGRES_USER: analylit_user
      POSTGRES_PASSWORD: strong_password
      POSTGRES_DB: analylit_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-user-db.sql:/docker-entrypoint-initdb.d/init.sql
      # Monter la configuration personnalisée
      - ./database/postgres.conf:/usr/share/postgresql/postgresql.conf.sample
    ports:
      - "5433:5432"
    deploy:
      resources:
        limits:
          memory: 3500M # Limite stricte
        reservations:
          memory: 2500M # Mémoire réservée
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: analylit_redis
    command: redis-server --maxmemory 2gb --maxmemory-policy allkeys-lru --save 300 10
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 2200M
        reservations:
          memory: 1500M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
    container_name: analylit_web
    ports:
      - "5000:5000"
      - "8080:5000"
    environment:
      - FLASK_ENV=production
      - WAIT_HOSTS=db:5432,redis:6379
      - WAIT_TIMEOUT=300
      - GUNICORN_WORKERS=6    # Adapté à votre CPU (supposé 6 cœurs)
      - GUNICORN_THREADS=4    # Plus de threads par worker
      - GUNICORN_TIMEOUT=300  # Timeout de 5min pour les tâches longues
      - PYTHONPATH=/home/appuser/app:/home/appuser/.local/lib/python3.11/site-packages
      - TEST_DATABASE_URL=
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 120s
      resources:
        limits:
          memory: 24000M
        reservations:
          memory: 12000M
    # La commande est maintenant dans entrypoint.sh
    depends_on:
      base:
        condition: service_started
      db:
        condition: service_healthy
      redis:
        condition: service_started
      ollama:  # AJOUTER cette dépendance
        condition: service_healthy
    
    volumes:
      # Monter les logs et les projets pour la persistance et l'accès depuis l'hôte
      - ./logs:/home/appuser/app/logs
      - ./projects:/home/appuser/app/projects
      - ./migrations:/home/appuser/app/migrations
      - ./tests:/home/appuser/app/tests
      - ./scripts/run_migrations.py:/home/appuser/app/run_migrations.py
      - ./web:/home/appuser/app/web
      - ./backend:/home/appuser/app/backend

  # Workers multiples pour paralléliser les tâches
  worker-fast:
    build:
      context: .  
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker_fast
    command: rq worker --url redis://redis:6379/0 fast_queue
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 1000M
      restart_policy:
        condition: on-failure
        delay: 5s
    depends_on:
      - base

  worker-default:
    build:
      context: .  
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker_default
    command: rq worker --url redis://redis:6379/0 default_queue
    env_file:
      - .env
    deploy:
      resources:
        limits:
          memory: 1500M
      restart_policy:
        condition: on-failure
        delay: 5s
    depends_on:
      - base

  # Worker dédié à l'IA, avec accès au GPU
  worker-ai:
    build:
      context: .  
      dockerfile: docker/Dockerfile.worker
    container_name: analylit_worker_ai
    command: rq worker --url redis://redis:6379/0 ai_queue background_queue
    env_file:
      - .env
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 2000M
      restart_policy:
        condition: on-failure
        delay: 5s
    depends_on:
      - base

  ollama:
    image: ollama/ollama
    container_name: analylit_ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
    deploy:
      resources:
        limits:
          memory: 4000M
        reservations:
          memory: 2000M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434/api/tags || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

volumes:
  postgres_data:
  ollama_data:  # AJOUTER ce volume
