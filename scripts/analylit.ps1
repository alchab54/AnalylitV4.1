# analylit.ps1 - Script PowerShell pour AnalyLit V4.1 
param([string]$action = "help")

$COMPOSE_FILE = "docker-compose-local.yml"
$WORKER_COUNT = 3

function Show-Help {
    Write-Host ""
    Write-Host "AnalyLit V4.1 - Gestionnaire de services" -ForegroundColor Blue
    Write-Host ""
    Write-Host "  install     " -ForegroundColor Green -NoNewline; Write-Host "Installation compl√®te"
    Write-Host "  start       " -ForegroundColor Green -NoNewline; Write-Host "D√©marrer les services"
    Write-Host "  stop        " -ForegroundColor Green -NoNewline; Write-Host "Arr√™ter les services"
    Write-Host "  status      " -ForegroundColor Green -NoNewline; Write-Host "√âtat des services"
    Write-Host "  logs        " -ForegroundColor Green -NoNewline; Write-Host "Voir les logs"
    Write-Host "  models      " -ForegroundColor Green -NoNewline; Write-Host "T√©l√©charger les mod√®les IA"
    Write-Host "  clean       " -ForegroundColor Green -NoNewline; Write-Host "Arr√™te et supprime les conteneurs, r√©seaux et volumes."
    Write-Host ""
}

function Install-AnalyLit {
    Write-Host "üöÄ Installation d'AnalyLit V4.1..." -ForegroundColor Blue
    
    # Cr√©er les dossiers
    New-Item -ItemType Directory -Force -Path "projects" | Out-Null
    New-Item -ItemType Directory -Force -Path "web" | Out-Null
    
    # V√©rifier .env
    if (-not (Test-Path ".env")) {
        Copy-Item "env.example" ".env"
        Write-Host "‚ö†Ô∏è  Fichier .env cr√©√©. Pensez √† le remplir !" -ForegroundColor Yellow
    }
    
    # Construction et d√©marrage
    docker-compose -f $COMPOSE_FILE up -d --build --scale worker=$WORKER_COUNT
    
    Write-Host "‚úÖ Installation termin√©e!" -ForegroundColor Green
    Write-Host "üåê Interface web: http://localhost:8080" -ForegroundColor Blue
}

function Start-Services {
    Write-Host "üöÄ D√©marrage des services (avec $WORKER_COUNT workers)..." -ForegroundColor Blue
    docker-compose -f $COMPOSE_FILE up -d --scale worker=$WORKER_COUNT
    Write-Host "‚úÖ Services d√©marr√©s" -ForegroundColor Green
}

function Stop-Services {
    Write-Host "üõë Arr√™t des services..." -ForegroundColor Blue
    docker-compose -f $COMPOSE_FILE down
    Write-Host "‚úÖ Services arr√™t√©s" -ForegroundColor Green
}

function Show-Status {
    Write-Host "üìä √âtat des services:" -ForegroundColor Blue
    docker-compose -f $COMPOSE_FILE ps
}

function Show-Logs {
    Write-Host "üìã Logs des services:" -ForegroundColor Blue
    docker-compose -f $COMPOSE_FILE logs -f --tail=100
}

function Invoke-ModelDownload {
    Write-Host "ü§ñ T√©l√©chargement des mod√®les essentiels..." -ForegroundColor Blue
    
    # Attendre Ollama
    do {
        Start-Sleep -Seconds 2
        $response = try { Invoke-WebRequest -Uri "http://localhost:11434/api/version" -TimeoutSec 5 } catch { $null }
    } while (-not $response)
    
    # T√©l√©charger les mod√®les
    $container = docker-compose -f $COMPOSE_FILE ps -q ollama
    docker exec $container ollama pull llama3.1:8b
    docker exec $container ollama pull phi3:mini
    docker exec $container ollama pull gemma:2b
    
    Write-Host "‚úÖ Mod√®les t√©l√©charg√©s" -ForegroundColor Green
}

function Clear-Environment {
    Write-Host "üßπ Nettoyage complet de l'environnement (conteneurs, r√©seaux, volumes)..." -ForegroundColor Yellow
    docker-compose -f $COMPOSE_FILE down -v
    Write-Host "‚úÖ Environnement nettoy√©." -ForegroundColor Green
}

# Dispatcher des actions
switch ($action) {
    "install" { Install-AnalyLit }
    "start" { Start-Services }
    "stop" { Stop-Services }
    "status" { Show-Status }
    "logs" { Show-Logs }
    "models" { Invoke-ModelDownload }
    "clean" { Clear-Environment }
    default { Show-Help }
}