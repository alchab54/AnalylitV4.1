# version: '3.8'

services:
  # --- Base de données ---
  db:
    image: postgres:15
    container_name: analylit-db-v4
    volumes:
      - postgres_data_v4:/var/lib/postgresql/data/
      - ./init-user-db.sql:/docker-entrypoint-initdb.d/init-user-db.sql
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-analylit_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-strong_password}
      - POSTGRES_DB=${POSTGRES_DB:-analylit_db}
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      - analylit-network
    restart: unless-stopped

  # --- Cache et File d'attente ---
  redis:
    image: redis:7-alpine
    container_name: analylit-redis-v4
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - analylit-network
    restart: unless-stopped

  # --- Moteur IA ---
  ollama:
    image: ollama/ollama:latest
    container_name: analylit-ollama-v4
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      - ollama_data_v4:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - analylit-network
    restart: unless-stopped

  # --- Serveur Web Applicatif ---
  web:
    image: analylit-web:latest
    build:
      context: .
      dockerfile: Dockerfile-web-complete
    container_name: analylit-web-v4
    volumes:
      - ./projects:/home/appuser/app/projects
      - ./model_cache:/home/appuser/app/model_cache
      - .:/home/appuser/app  # Monte le code source pour le développement
    environment:
      - TESTING=true
      - FLASK_ENV=testing
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - PYTHONPATH=/home/appuser/app # Assure que le chemin est correct
    env_file:
      - .env
    # CORRECTION: L'initialisation de la DB est déjà gérée par l'entrypoint.
    # La commande doit simplement lancer l'entrypoint.
    command: ["/home/appuser/app/entrypoint.sh"]
    depends_on:
      db:
      
      Gemini
      Thinking
      Bonjour ! Vous avez parfaitement identifié les deux problèmes : une erreur d'import en Python qui est simple à corriger, et un avertissement de permission Docker qui est un peu plus subtil mais tout aussi important pour un environnement de test propre.
      
      Je vais appliquer la correction pour l'erreur d'import dans votre fichier de test.
      
      Correction de l'erreur d'import (ImportError)
      Je vais modifier la ligne d'import dans tests/test_tasks_api.py pour qu'elle soit correcte, ce qui résoudra l'ImportError.
      
      test_tasks_api.py
      -1
      +2
      Concernant l'avertissement de permission (PytestCacheWarning)
      Votre analyse est tout à fait correcte. L'avertissement Permission denied indique que l'utilisateur appuser à l'intérieur du conteneur Docker n'a pas les droits d'écriture sur le répertoire /home/appuser/app, qui est le répertoire où le code de votre projet est monté depuis votre machine hôte.
      
      La solution que vous proposez, qui consiste à s'assurer que appuser est propriétaire du répertoire de travail dans le Dockerfile, est la bonne pratique pour résoudre ce problème de manière durable.
      
      Voici à quoi ressemblerait la modification dans vos Dockerfile-web-complete et Dockerfile-worker-complete (je ne peux pas modifier ces fichiers car ils ne sont pas dans le contexte, mais voici l'exemple) :
      
      dockerfile
      # Dans Dockerfile-web-complete et Dockerfile-worker-complete
      
      # ... (après la création de appuser et la définition de WORKDIR)
      WORKDIR /home/appuser/app
      
      # Assurez-vous que l'utilisateur est propriétaire du répertoire de l'application
      # Cette commande doit être exécutée avant de copier les fichiers
      RUN chown -R appuser:appuser /home/appuser/app
      
      # Copiez les fichiers en tant que appuser
      COPY --chown=appuser:appuser . .
      
      # ... (le reste du Dockerfile)
      En appliquant la correction de l'import et en ajustant les permissions dans vos Dockerfiles, vous devriez avoir une suite de tests qui s'exécute sans erreur ni avertissement.
      
      Prompts to tr
        condition: service_started
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/settings/profiles"]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - analylit-network
    restart: unless-stopped

  # --- Worker pour les tâches asynchrones ---
  worker:
    image: analylit-worker:latest
    build:
      context: .
      dockerfile: Dockerfile-worker-complete
    container_name: analylit-worker-v4
    volumes:
      - ./projects:/home/appuser/app/projects
      - ./model_cache:/home/appuser/app/model_cache
      - .:/home/appuser/app # Monte le code source pour le développement
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/home/appuser/app # CORRECTION DÉFINITIVE
      - TESTING=true
      - FLASK_ENV=testing
    command: >
      rq worker -u redis://redis:6379/0 --with-scheduler analylit_processing_v4 analylit_synthesis_v4 analylit_analysis_v4 analylit_background_v4
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_healthy
    deploy:
      replicas: 1
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - analylit-network
    restart: unless-stopped

  # --- Serveur Web Frontend (Nginx) ---
  nginx:
    build:
      context: .
      dockerfile: Dockerfile-nginx
    volumes:
      - ./web:/usr/share/nginx/html:ro
      # ↖ Ceci mappe ton dossier local `web` sur la racine statique vue par Nginx
    container_name: analylit-nginx-v4
    ports:
      - "8080:80"
    depends_on:
      web:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - analylit-network
    restart: unless-stopped

volumes:
  postgres_data_v4:
  ollama_data_v4:
  projects_data:
  model_cache_data:

networks:
  analylit-network:
    driver: bridge
